# Form implementation generated from reading ui file '../app/ui\main_interface.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from app.utils import get_abs_path


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1017, 516)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setStyleSheet(
            "QWidget#centralwidget {\n"
            "    background-color: qlineargradient(spread:reflect, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(34, 148, 157, 255), stop:0.890052 rgba(255, 177, 177, 255));\n"
            "}\n"
            ""
        )
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.main_layout = QtWidgets.QVBoxLayout()
        self.main_layout.setContentsMargins(20, -1, 20, -1)
        self.main_layout.setSpacing(5)
        self.main_layout.setObjectName("main_layout")
        self.organ_layout = QtWidgets.QHBoxLayout()
        self.organ_layout.setContentsMargins(0, -1, 0, -1)
        self.organ_layout.setSpacing(40)
        self.organ_layout.setObjectName("organ_layout")
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setEnabled(True)
        self.comboBox.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.comboBox.setStyleSheet(
            "QComboBox {\n"
            "    color: #FFFFFF; /* Couleur du texte */\n"
            '    font: 15pt "Ubuntu";\n'
            "    padding: 5px; /* Ajustement de la marge intérieure */\n"
            "    border: 1px solid rgba(0, 25, 12, 0.4); /* Couleur de la bordure */\n"
            "    border-radius: 5px; /* Arrondi des coins */\n"
            "    background-color: transparent; /* Couleur de fond */\n"
            "    selection-background-color: rgba(34, 148, 157, 1); /* Couleur de fond de la sélection */\n"
            "\n"
            "    padding-top: 1px; /* Ajustez la marge supérieure pour centrer verticalement le texte */\n"
            "    padding-bottom: 1px;\n"
            "}\n"
            "\n"
            "QComboBox:hover {\n"
            "    border-color: #FFFFFF; /* Couleur de la bordure lorsque survolé */\n"
            "}\n"
            "\n"
            "QComboBox::drop-down {\n"
            "    border: none; /* Suppression de la flèche de liste déroulante par défaut */\n"
            "}\n"
            "\n"
            "\n"
            "QComboBox QAbstractItemView {\n"
            "    border: 2px solid darkgray; /* Bordure de la liste déroulante */\n"
            "    background-color:rgba(69, 154, 160, 0.7); \n"
            "    selection-background-color: rgba(34, 148, 157, 1); /* Couleur de fond de la sélection */\n"
            "}"
        )
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.organ_layout.addWidget(self.comboBox)
        self.slider = QtWidgets.QSlider(parent=self.centralwidget)
        self.slider.setMinimumSize(QtCore.QSize(100, 0))
        self.slider.setMaximumSize(QtCore.QSize(300, 16777215))
        self.slider.setStyleSheet(
            "QSlider::groove:horizontal {\n"
            "    border: 1px solid #999999;\n"
            "    height: 8px; /* the groove expands to the size of the slider by default. by giving it a height, it has a fixed size */\n"
            "    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #B1B1B1, stop:1 #c4c4c4);\n"
            "    margin: 2px 0;\n"
            "}\n"
            "\n"
            "QSlider::handle:horizontal {\n"
            "    background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #b4b4b4, stop:1 #8f8f8f);\n"
            "    border: 1px solid #5c5c5c;\n"
            "    width: 18px;\n"
            "    margin: -2px 0; /* handle is placed by default on the contents rect of the groove. Expand outside the groove */\n"
            "    border-radius: 3px;\n"
            "}\n"
            "\n"
            "QSlider::sub-page:horizontal {\n"
            "    border: 1px solid #999999;\n"
            "    height: 8px; /* the groove expands to the size of the slider by default. by giving it a height, it has a fixed size */\n"
            "    background: rgba(0, 25, 12, 0.4);\n"
            "    margin: 2px 0;\n"
            "}"
        )
        self.slider.setSliderPosition(99)
        self.slider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.slider.setObjectName("slider")
        self.organ_layout.addWidget(self.slider)
        self.glass_button = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.glass_button.setEnabled(True)
        self.glass_button.setStyleSheet(
            "QCheckBox {\n"
            "    color: #FFFFFF; /* Couleur du texte */\n"
            '    font: 15pt "Ubuntu";\n'
            "}\n"
            "\n"
            "QCheckBox::indicator {\n"
            "    border-radius: 10px;\n"
            "    padding: 1.5px;\n"
            "    background-color: rgba(255, 255, 255, 1); /* Couleur de fond de la case à cocher */\n"
            "    border: 1px solid #FFFFFF; /* Couleur de la bordure de la case à cocher */\n"
            "    width: 15px; /* Largeur de la case à cocher */\n"
            "    height: 15px; /* Hauteur de la case à cocher */\n"
            "}\n"
            "\n"
            "QCheckBox::indicator:hover {\n"
            "    background-color: rgba(0, 0, 0, 0.2); /* Couleur de fond de la case à cocher lorsqu'elle est survolée */\n"
            "}\n"
            "\n"
            "QCheckBox::indicator:checked {\n"
            "    background-color: rgba(0, 255, 0, 0.4); /* Couleur de fond de la case à cocher lorsqu'elle est cochée */\n"
            "    border-color: #FFFFFF;\n"
            "}\n"
            "\n"
            ""
        )
        self.glass_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(
            QtGui.QPixmap(
                get_abs_path("resources/icons/interface/magnifying-glass.svg")
            ),
            QtGui.QIcon.Mode.Normal,
            QtGui.QIcon.State.Off,
        )
        self.glass_button.setIcon(icon)
        self.glass_button.setObjectName("glass_button")
        self.organ_layout.addWidget(self.glass_button)
        self.main_layout.addLayout(self.organ_layout)
        self.volume_button = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.volume_button.setStyleSheet(
            "QCheckBox {\n"
            "    color: #FFFFFF; /* Couleur du texte */\n"
            '    font: 15pt "Ubuntu";\n'
            "}\n"
            "\n"
            "QCheckBox::indicator {\n"
            "    border-radius: 10px;\n"
            "    padding: 1.5px;\n"
            "    background-color: rgba(255, 255, 255, 1); /* Couleur de fond de la case à cocher */\n"
            "    border: 1px solid #FFFFFF; /* Couleur de la bordure de la case à cocher */\n"
            "    width: 15px; /* Largeur de la case à cocher */\n"
            "    height: 15px; /* Hauteur de la case à cocher */\n"
            "}\n"
            "\n"
            "QCheckBox::indicator:hover {\n"
            "    background-color: rgba(0, 0, 0, 0.2); /* Couleur de fond de la case à cocher lorsqu'elle est survolée */\n"
            "}\n"
            "\n"
            "QCheckBox::indicator:checked {\n"
            "    background-color: rgba(0, 255, 0, 0.4); /* Couleur de fond de la case à cocher lorsqu'elle est cochée */\n"
            "    border-color: #FFFFFF;\n"
            "}\n"
            "\n"
            ""
        )
        self.volume_button.setObjectName("volume_button")
        self.main_layout.addWidget(
            self.volume_button, 0, QtCore.Qt.AlignmentFlag.AlignLeft
        )
        self.label_button = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.label_button.setStyleSheet(
            "QCheckBox {\n"
            "    color: #FFFFFF; /* Couleur du texte */\n"
            '    font: 15pt "Ubuntu";\n'
            "}\n"
            "\n"
            "QCheckBox::indicator {\n"
            "    border-radius: 10px;\n"
            "    padding: 1.5px;\n"
            "    background-color: rgba(255, 255, 255, 1); /* Couleur de fond de la case à cocher */\n"
            "    border: 1px solid #FFFFFF; /* Couleur de la bordure de la case à cocher */\n"
            "    width: 15px; /* Largeur de la case à cocher */\n"
            "    height: 15px; /* Hauteur de la case à cocher */\n"
            "}\n"
            "\n"
            "QCheckBox::indicator:hover {\n"
            "    background-color: rgba(0, 0, 0, 0.2); /* Couleur de fond de la case à cocher lorsqu'elle est survolée */\n"
            "}\n"
            "\n"
            "QCheckBox::indicator:checked {\n"
            "    background-color: rgba(0, 255, 0, 0.4); /* Couleur de fond de la case à cocher lorsqu'elle est cochée */\n"
            "    border-color: #FFFFFF;\n"
            "}\n"
            "\n"
            ""
        )
        self.label_button.setObjectName("label_button")
        self.main_layout.addWidget(self.label_button)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.stereo_button = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.stereo_button.setStyleSheet(
            "QCheckBox {\n"
            "    color: #FFFFFF; /* Couleur du texte */\n"
            '    font: 15pt "Ubuntu";\n'
            "}\n"
            "\n"
            "QCheckBox::indicator {\n"
            "    border-radius: 10px;\n"
            "    padding: 1.5px;\n"
            "    background-color: rgba(255, 255, 255, 1); /* Couleur de fond de la case à cocher */\n"
            "    border: 1px solid #FFFFFF; /* Couleur de la bordure de la case à cocher */\n"
            "    width: 15px; /* Largeur de la case à cocher */\n"
            "    height: 15px; /* Hauteur de la case à cocher */\n"
            "}\n"
            "\n"
            "QCheckBox::indicator:hover {\n"
            "    background-color: rgba(0, 0, 0, 0.2); /* Couleur de fond de la case à cocher lorsqu'elle est survolée */\n"
            "}\n"
            "\n"
            "QCheckBox::indicator:checked {\n"
            "    background-color: rgba(0, 255, 0, 0.4); /* Couleur de fond de la case à cocher lorsqu'elle est cochée */\n"
            "    border-color: #FFFFFF;\n"
            "}\n"
            "\n"
            ""
        )
        self.stereo_button.setObjectName("stereo_button")
        self.horizontalLayout_2.addWidget(self.stereo_button)
        self.stereo_param_button = QtWidgets.QToolButton(parent=self.centralwidget)
        self.stereo_param_button.setStyleSheet(
            "QToolButton {\n"
            '    font: 15pt "Ubuntu";\n'
            "    background-color: transparent;\n"
            "    border: 1px solid transparent;\n"
            "    color: #FFFFFF; /* Couleur du texte */\n"
            "    border-radius: 10px;\n"
            "    padding: 1.5px;\n"
            "}\n"
            "\n"
            "QToolButton:hover {\n"
            "    background-color: rgba(0, 0, 0, 0.2); /* Couleur de fond lorsqu'il est survolé */\n"
            "}\n"
            "\n"
            "QToolButton:pressed {\n"
            "    background-color: rgba(0, 0, 0, 0.4); /* Couleur de fond lorsqu'il est cliqué */\n"
            "}"
        )
        self.stereo_param_button.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(
            QtGui.QPixmap(get_abs_path("resources/icons/interface/gear.svg")),
            QtGui.QIcon.Mode.Normal,
            QtGui.QIcon.State.Off,
        )
        self.stereo_param_button.setIcon(icon1)
        self.stereo_param_button.setIconSize(QtCore.QSize(30, 30))
        self.stereo_param_button.setObjectName("stereo_param_button")
        self.horizontalLayout_2.addWidget(self.stereo_param_button)
        self.main_layout.addLayout(self.horizontalLayout_2)
        self.ruler_button = QtWidgets.QToolButton(parent=self.centralwidget)
        self.ruler_button.setStyleSheet(
            "QToolButton {\n"
            '    font: 15pt "Ubuntu";\n'
            "    background-color: transparent;\n"
            "    border: 1px solid transparent;\n"
            "    color: #FFFFFF; /* Couleur du texte */\n"
            "}\n"
            "\n"
            "QToolButton:hover {\n"
            "    background-color: rgba(0, 0, 0, 0.2); /* Couleur de fond lorsqu'il est survolé */\n"
            "}\n"
            "\n"
            "QToolButton:pressed {\n"
            "    background-color: rgba(0, 0, 0, 0.4); /* Couleur de fond lorsqu'il est cliqué */\n"
            "}"
        )
        self.ruler_button.setObjectName("ruler_button")
        self.main_layout.addWidget(self.ruler_button)
        self.horizontalLayout.addLayout(self.main_layout)
        self.image_layout = QtWidgets.QGridLayout()
        self.image_layout.setObjectName("image_layout")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setMinimumSize(QtCore.QSize(500, 0))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.image_layout.addWidget(self.frame, 0, 0, 1, 1)
        self.horizontalLayout.addLayout(self.image_layout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1017, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Liver"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Right kidney"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Spleen"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Pancreas"))
        self.comboBox.setItemText(4, _translate("MainWindow", "Aorta"))
        self.comboBox.setItemText(5, _translate("MainWindow", "Inferior vena cava"))
        self.comboBox.setItemText(6, _translate("MainWindow", "Right adrenal gland"))
        self.comboBox.setItemText(7, _translate("MainWindow", "Left adrenal gland"))
        self.comboBox.setItemText(8, _translate("MainWindow", "Gallbladder"))
        self.comboBox.setItemText(9, _translate("MainWindow", "Esophagus"))
        self.comboBox.setItemText(10, _translate("MainWindow", "Stomach"))
        self.comboBox.setItemText(11, _translate("MainWindow", "Duodenum"))
        self.comboBox.setItemText(12, _translate("MainWindow", "Left kidney"))
        self.volume_button.setText(_translate("MainWindow", "Volume rendering"))
        self.label_button.setText(_translate("MainWindow", "Label"))
        self.stereo_button.setText(_translate("MainWindow", "Stereo rendering"))
        self.ruler_button.setText(_translate("MainWindow", "Add ruler"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
